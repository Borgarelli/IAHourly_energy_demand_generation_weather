# -*- coding: utf-8 -*-
"""Classificação_Clima

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k-2qCfIo6HU_tU8ojwYijK0khm-nqJrd
"""

import pandas as pd
weather_features = pd.read_csv('https://raw.githubusercontent.com/Borgarelli/IAHourly_energy_demand_generation_weather/main/weather_features.csv')

weather_features = pd.get_dummies(weather_features, columns=['city_name', 'weather_description'])
weather_features.head(500)

weather_features.drop(['dt_iso', 'rain_1h', 'rain_3h','snow_3h', 'weather_icon'], axis=1, inplace=True)
weather_features.head(500)

# Encontre as condições meteorológicas com menos de um certo número de instâncias (por exemplo, 5)
rare_conditions = weather_features['weather_main'].value_counts()[weather_features['weather_main'].value_counts() < 500].index

# Substitua essas condições meteorológicas raras por uma nova categoria
weather_features['weather_main'] = weather_features['weather_main'].apply(lambda x: 'outros' if x in rare_conditions else x)

# Todos os atributos menos as colunas de classe codificadas
X = weather_features.drop(['weather_main'], axis=1)

# Colunas de classe codificadas
y = weather_features['weather_main']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, stratify = y)

# Treina com 80%
from sklearn.neural_network import MLPClassifier

# Instancia um classificador tipo rede neural com, no máximo, 2000 épocas
model = MLPClassifier(random_state=1, max_iter=2000)

# Treina o modelo
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, precision_score, confusion_matrix, ConfusionMatrixDisplay

# Predição
y_pred = model.predict(X_test)

# Acurácia
acc = accuracy_score(y_test, y_pred)
print("Acurácia: {:.2f}".format(acc))
# Precisão
precision = precision_score(y_test, y_pred, average = 'macro',zero_division = 0.0)
print("Precisão: {:.2f}".format(precision))

# Matriz de confusão
print('Matriz de Confusão')
cm = confusion_matrix(y_test, y_pred, labels=y_train.unique())
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=y_train.unique())
disp.plot()